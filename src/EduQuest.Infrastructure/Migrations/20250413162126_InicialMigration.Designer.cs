// <auto-generated />
using System;
using EduQuest.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduQuest.Infrastructure.Migrations
{
    [DbContext(typeof(EduQuestDbContext))]
    [Migration("20250413162126_InicialMigration")]
    partial class InicialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduQuest.Domain.Entities.Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.ToTable("Alternativas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TempoLimiteSegundos")
                        .HasColumnType("int");

                    b.Property<int>("TipoAtividadeId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoAtividadeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Atividades");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TempoLimiteSegundos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.ToTable("Batalhas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Conquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CriterioTipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriterioValor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("proximoCursoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("proximoCursoId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int?>("ConquistaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Escopo")
                        .HasColumnType("int");

                    b.Property<int>("MoedasRecompensa")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.Property<int>("XpRecompensa")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataFimVigencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataInicioVigencia")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConquistaId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Desafios");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFimContagem")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicioContagem")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCondicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCondicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValorObjetivo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.ToTable("DesafioCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DesafioId")
                        .HasColumnType("int");

                    b.Property<string>("Inep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUnidadeId")
                        .HasColumnType("int");

                    b.Property<bool>("ativo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.HasIndex("TipoUnidadeId");

                    b.ToTable("Escolas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Mensagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("int");

                    b.Property<bool>("Lida")
                        .HasColumnType("bit");

                    b.Property<int>("RemetenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("RemetenteId");

                    b.ToTable("Mensagens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.PeriodoLetivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Ano")
                        .HasColumnType("smallint");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInicio")
                        .HasColumnType("date");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("PeriodosLetivos");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlternativaCorreta")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Questoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoAtividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XpRecompensa")
                        .HasColumnType("int");

                    b.Property<int>("moedasRecompensa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TiposAtividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoUnidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposUnidade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int?>("DesafioId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Inep")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoLetivoId")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Turno")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("DesafioId");

                    b.HasIndex("PeriodoLetivoId");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Perfil")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator().HasValue("Usuario");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.UsuarioEscolaPerfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.HasIndex("PerfilId");

                    b.HasIndex("UsuarioId", "EscolaId", "PerfilId")
                        .IsUnique();

                    b.ToTable("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.HasBaseType("EduQuest.Domain.Entities.Usuario");

                    b.Property<DateTime>("DataUltimoAcessoStreak")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<int>("SaldoMoedas")
                        .HasColumnType("int");

                    b.Property<int>("StreakDiasConsecutivos")
                        .HasColumnType("int");

                    b.Property<int>("XpAtual")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Aluno");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Alternativa", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany()
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.TipoAtividade", "TipoAtividade")
                        .WithMany()
                        .HasForeignKey("TipoAtividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoAtividade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany()
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Curso", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Curso", "proximoCurso")
                        .WithMany()
                        .HasForeignKey("proximoCursoId");

                    b.Navigation("proximoCurso");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Conquista", "Conquista")
                        .WithMany()
                        .HasForeignKey("ConquistaId");

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conquista");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany()
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desafio");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", null)
                        .WithMany("Escolas")
                        .HasForeignKey("DesafioId");

                    b.HasOne("EduQuest.Domain.Entities.TipoUnidade", "TipoUnidade")
                        .WithMany()
                        .HasForeignKey("TipoUnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUnidade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Mensagem", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Destinatario")
                        .WithMany()
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Remetente")
                        .WithMany()
                        .HasForeignKey("RemetenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Remetente");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.PeriodoLetivo", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Disciplina");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Desafio", null)
                        .WithMany("Turmas")
                        .HasForeignKey("DesafioId");

                    b.HasOne("EduQuest.Domain.Entities.PeriodoLetivo", "PeriodoLetivo")
                        .WithMany()
                        .HasForeignKey("PeriodoLetivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("PeriodoLetivo");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.UsuarioEscolaPerfil", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Perfil", "Perfil")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");

                    b.Navigation("Perfil");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.Navigation("Escolas");

                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Perfil", b =>
                {
                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("UsuarioEscolaPerfis");
                });
#pragma warning restore 612, 618
        }
    }
}
