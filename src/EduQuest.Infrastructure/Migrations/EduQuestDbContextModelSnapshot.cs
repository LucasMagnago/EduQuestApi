// <auto-generated />
using System;
using EduQuest.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduQuest.Infrastructure.Migrations
{
    [DbContext(typeof(EduQuestDbContext))]
    partial class EduQuestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduQuest.Domain.Entities.AlocacaoProfessor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.HasKey("ProfessorId", "TurmaId", "DisciplinaId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("AlocacaoProfessores");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.ToTable("Alternativas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoConquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("ConquistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataObtencao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("ConquistaId");

                    b.ToTable("AlunoConquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoPossuiItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAquisicao")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("ItemId");

                    b.ToTable("AlunoPossuiItens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioConficaoId")
                        .HasColumnType("int");

                    b.Property<int>("ValorAtual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DesafioConficaoId");

                    b.ToTable("AlunoProgressoCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoDesafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DesafioId");

                    b.ToTable("AlunoProgressoDesafios");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoRealizaAtividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackProfessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoedasGanhas")
                        .HasColumnType("int");

                    b.Property<int>("PontuacaoObtida")
                        .HasColumnType("int");

                    b.Property<int>("XpGanho")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AtividadeId");

                    b.ToTable("AlunoRealizaAtividades");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TempoLimiteSegundos")
                        .HasColumnType("int");

                    b.Property<int>("TipoAtividadeId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("TipoAtividadeId");

                    b.ToTable("Atividades");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeQuestao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("AtividadeQuestoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeTurma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.HasIndex("TurmaId");

                    b.ToTable("AtivideTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TempoLimiteSegundos")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.ToTable("Batalhas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaParticipante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("BatalhaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoedaRecebidas")
                        .HasColumnType("int");

                    b.Property<int>("Pontuacao")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TempoTotalSegundos")
                        .HasColumnType("int");

                    b.Property<int>("XpRecebido")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("BatalhaId");

                    b.ToTable("BatalhaParticipantes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaRespostaParticipante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Acertou")
                        .HasColumnType("bit");

                    b.Property<int>("BatalhaParticipanteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataResposta")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.Property<string>("RespostaDada")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatalhaParticipanteId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("BatalhaRespostaParticipantes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Conquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CriterioTipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriterioValor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProximoCursoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProximoCursoId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Escopo")
                        .HasColumnType("int");

                    b.Property<int>("MoedasRecompensa")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("XpRecompensa")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataFimVigencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataInicioVigencia")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Desafios");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFimContagem")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicioContagem")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCondicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCondicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoCondicaoId")
                        .HasColumnType("int");

                    b.Property<int>("ValorObjetivo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.HasIndex("TipoCondicaoId");

                    b.ToTable("DesafioCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioEscola", b =>
                {
                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.HasKey("DesafioId", "EscolaId");

                    b.HasIndex("EscolaId");

                    b.ToTable("DesafioEscolas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioTurma", b =>
                {
                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("DesafioId", "TurmaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("DesafioTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplinas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Inep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUnidadeId")
                        .HasColumnType("int");

                    b.Property<bool>("ativo")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("TipoUnidadeId");

                    b.ToTable("Escolas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Matricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataExclusao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataMatricula")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSituacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Situacao")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioExclusaoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioSituacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("TurmaId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.HasIndex("UsuarioExclusaoId");

                    b.HasIndex("UsuarioSituacaoId");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Mensagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("int");

                    b.Property<bool>("Lida")
                        .HasColumnType("bit");

                    b.Property<int>("RemetenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("RemetenteId");

                    b.ToTable("Mensagens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.PeriodoLetivo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("Ano")
                        .HasColumnType("smallint");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("DataFim")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DataInicio")
                        .HasColumnType("date");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("PeriodosLetivos");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlternativaCorretaId")
                        .HasColumnType("int");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlternativaCorretaId");

                    b.HasIndex("CursoId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Questoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoAtividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("XpRecompensa")
                        .HasColumnType("int");

                    b.Property<int>("moedasRecompensa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TiposAtividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoUnidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposUnidade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.Property<int>("Inep")
                        .HasColumnType("int");

                    b.Property<int>("PeriodoLetivoId")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Turno")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("EscolaId");

                    b.HasIndex("PeriodoLetivoId");

                    b.ToTable("Turmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.UsuarioEscolaPerfil", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.HasKey("UsuarioId", "EscolaId", "PerfilId");

                    b.HasIndex("EscolaId");

                    b.HasIndex("PerfilId");

                    b.ToTable("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.HasBaseType("EduQuest.Domain.Entities.Usuario");

                    b.Property<DateTime>("DataUltimoAcessoStreak")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<int>("SaldoMoedas")
                        .HasColumnType("int");

                    b.Property<int>("StreakDiasConsecutivos")
                        .HasColumnType("int");

                    b.Property<int>("XpAtual")
                        .HasColumnType("int");

                    b.ToTable("Alunos", (string)null);
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlocacaoProfessor", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany("AlocacaoProfessores")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Professor")
                        .WithMany("AlocacaoProfessores")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("AlocacaoProfessores")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Alternativa", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoConquista", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoConquistas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Conquista", "Conquista")
                        .WithMany("AlunoConquistas")
                        .HasForeignKey("ConquistaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Conquista");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoPossuiItem", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoPossuiItens")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Item", "Item")
                        .WithMany("AlunoPossuiItens")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoCondicao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoProgressoCondicoes")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.DesafioCondicao", "DesafioCondicao")
                        .WithMany("AlunoProgressoCondicoes")
                        .HasForeignKey("DesafioConficaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("DesafioCondicao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoDesafio", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoProgressoDesafios")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("AlunoProgressoDesafios")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Desafio");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoRealizaAtividade", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoRealizaAtividades")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AlunoRealizaAtividades")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.TipoAtividade", "TipoAtividade")
                        .WithMany("Atividades")
                        .HasForeignKey("TipoAtividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("TipoAtividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeQuestao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AtividadeQuestoes")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("AtividadeQuestoes")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atividade");

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeTurma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AtividadeTurmas")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("AtividadeTurmas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atividade");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany()
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaParticipante", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("BatalhaParticipantes")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Batalha", "Batalha")
                        .WithMany("BatalhaParticipantes")
                        .HasForeignKey("BatalhaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Batalha");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaRespostaParticipante", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.BatalhaParticipante", "BatalhaParticipante")
                        .WithMany("BatalhaRespostaParticipantes")
                        .HasForeignKey("BatalhaParticipanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("BatalhaRespostaParticipantes")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BatalhaParticipante");

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Curso", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Curso", "ProximoCurso")
                        .WithMany()
                        .HasForeignKey("ProximoCursoId");

                    b.Navigation("ProximoCurso");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("DesafioCondicoes")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.TipoCondicao", "TipoCondicaoNavigation")
                        .WithMany()
                        .HasForeignKey("TipoCondicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("TipoCondicaoNavigation");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioEscola", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("DesafioEscolas")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany("DesafiosEscolas")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioTurma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("DesafioTurmas")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("DesafioTurmas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.TipoUnidade", "TipoUnidade")
                        .WithMany()
                        .HasForeignKey("TipoUnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUnidade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Matricula", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("Matriculas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany("MatriculasCriadas")
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioExclusao")
                        .WithMany("MatriculasExcluidas")
                        .HasForeignKey("UsuarioExclusaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioSituacao")
                        .WithMany("MatriculasComSituacaoAlterada")
                        .HasForeignKey("UsuarioSituacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Turma");

                    b.Navigation("UsuarioCriacao");

                    b.Navigation("UsuarioExclusao");

                    b.Navigation("UsuarioSituacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Mensagem", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Destinatario")
                        .WithMany("MensagensRecebidas")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Remetente")
                        .WithMany("MensagensEnviadas")
                        .HasForeignKey("RemetenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Remetente");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.PeriodoLetivo", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Alternativa", "AlternativaCorreta")
                        .WithMany()
                        .HasForeignKey("AlternativaCorretaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternativaCorreta");

                    b.Navigation("Curso");

                    b.Navigation("Disciplina");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.PeriodoLetivo", "PeriodoLetivo")
                        .WithMany("Turmas")
                        .HasForeignKey("PeriodoLetivoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Escola");

                    b.Navigation("PeriodoLetivo");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.UsuarioEscolaPerfil", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Perfil", "Perfil")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");

                    b.Navigation("Perfil");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("EduQuest.Domain.Entities.Aluno", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.Navigation("AlunoRealizaAtividades");

                    b.Navigation("AtividadeQuestoes");

                    b.Navigation("AtividadeTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.Navigation("BatalhaParticipantes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaParticipante", b =>
                {
                    b.Navigation("BatalhaRespostaParticipantes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Conquista", b =>
                {
                    b.Navigation("AlunoConquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.Navigation("AlunoProgressoDesafios");

                    b.Navigation("DesafioCondicoes");

                    b.Navigation("DesafioEscolas");

                    b.Navigation("DesafioTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.Navigation("AlunoProgressoCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Disciplina", b =>
                {
                    b.Navigation("AlocacaoProfessores");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.Navigation("DesafiosEscolas");

                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Item", b =>
                {
                    b.Navigation("AlunoPossuiItens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Perfil", b =>
                {
                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.PeriodoLetivo", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.Navigation("Alternativas");

                    b.Navigation("AtividadeQuestoes");

                    b.Navigation("BatalhaRespostaParticipantes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoAtividade", b =>
                {
                    b.Navigation("Atividades");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.Navigation("AlocacaoProfessores");

                    b.Navigation("AtividadeTurmas");

                    b.Navigation("DesafioTurmas");

                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("AlocacaoProfessores");

                    b.Navigation("MatriculasComSituacaoAlterada");

                    b.Navigation("MatriculasCriadas");

                    b.Navigation("MatriculasExcluidas");

                    b.Navigation("MensagensEnviadas");

                    b.Navigation("MensagensRecebidas");

                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.Navigation("AlunoConquistas");

                    b.Navigation("AlunoPossuiItens");

                    b.Navigation("AlunoProgressoCondicoes");

                    b.Navigation("AlunoProgressoDesafios");

                    b.Navigation("AlunoRealizaAtividades");

                    b.Navigation("BatalhaParticipantes");

                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
