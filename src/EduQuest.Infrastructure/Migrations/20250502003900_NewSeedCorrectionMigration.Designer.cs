// <auto-generated />
using System;
using EduQuest.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduQuest.Infrastructure.Migrations
{
    [DbContext(typeof(EduQuestDbContext))]
    [Migration("20250502003900_NewSeedCorrectionMigration")]
    partial class NewSeedCorrectionMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduQuest.Domain.Entities.AlocacaoProfessor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.HasKey("ProfessorId", "TurmaId", "DisciplinaId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("AlocacaoProfessores");

                    b.HasData(
                        new
                        {
                            ProfessorId = 3,
                            TurmaId = 1,
                            DisciplinaId = 2
                        },
                        new
                        {
                            ProfessorId = 3,
                            TurmaId = 2,
                            DisciplinaId = 2
                        },
                        new
                        {
                            ProfessorId = 4,
                            TurmaId = 1,
                            DisciplinaId = 1
                        },
                        new
                        {
                            ProfessorId = 4,
                            TurmaId = 2,
                            DisciplinaId = 1
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.ToTable("Alternativas");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Descricao = "8",
                            Ordem = 1,
                            QuestaoId = 2
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "9",
                            Ordem = 2,
                            QuestaoId = 2
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "4",
                            Ordem = 1,
                            QuestaoId = 3
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "5",
                            Ordem = 2,
                            QuestaoId = 3
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "5",
                            Ordem = 1,
                            QuestaoId = 4
                        },
                        new
                        {
                            Id = 8,
                            Descricao = "6",
                            Ordem = 2,
                            QuestaoId = 4
                        },
                        new
                        {
                            Id = 9,
                            Descricao = "14",
                            Ordem = 1,
                            QuestaoId = 5
                        },
                        new
                        {
                            Id = 10,
                            Descricao = "12",
                            Ordem = 2,
                            QuestaoId = 5
                        },
                        new
                        {
                            Id = 11,
                            Descricao = "4",
                            Ordem = 1,
                            QuestaoId = 6
                        },
                        new
                        {
                            Id = 12,
                            Descricao = "3",
                            Ordem = 2,
                            QuestaoId = 6
                        },
                        new
                        {
                            Id = 13,
                            Descricao = "9",
                            Ordem = 1,
                            QuestaoId = 7
                        },
                        new
                        {
                            Id = 14,
                            Descricao = "6",
                            Ordem = 2,
                            QuestaoId = 7
                        },
                        new
                        {
                            Id = 15,
                            Descricao = "10",
                            Ordem = 1,
                            QuestaoId = 8
                        },
                        new
                        {
                            Id = 16,
                            Descricao = "20",
                            Ordem = 2,
                            QuestaoId = 8
                        },
                        new
                        {
                            Id = 17,
                            Descricao = "48",
                            Ordem = 1,
                            QuestaoId = 9
                        },
                        new
                        {
                            Id = 18,
                            Descricao = "56",
                            Ordem = 2,
                            QuestaoId = 9
                        },
                        new
                        {
                            Id = 19,
                            Descricao = "19",
                            Ordem = 1,
                            QuestaoId = 10
                        },
                        new
                        {
                            Id = 20,
                            Descricao = "20",
                            Ordem = 2,
                            QuestaoId = 10
                        },
                        new
                        {
                            Id = 21,
                            Descricao = "15",
                            Ordem = 1,
                            QuestaoId = 11
                        },
                        new
                        {
                            Id = 22,
                            Descricao = "12",
                            Ordem = 2,
                            QuestaoId = 11
                        },
                        new
                        {
                            Id = 23,
                            Descricao = "O menino",
                            Ordem = 1,
                            QuestaoId = 12
                        },
                        new
                        {
                            Id = 24,
                            Descricao = "Para casa",
                            Ordem = 2,
                            QuestaoId = 12
                        },
                        new
                        {
                            Id = 25,
                            Descricao = "Adjetivo",
                            Ordem = 1,
                            QuestaoId = 13
                        },
                        new
                        {
                            Id = 26,
                            Descricao = "Substantivo",
                            Ordem = 2,
                            QuestaoId = 13
                        },
                        new
                        {
                            Id = 27,
                            Descricao = "Metáfora",
                            Ordem = 1,
                            QuestaoId = 14
                        },
                        new
                        {
                            Id = 28,
                            Descricao = "Comparação",
                            Ordem = 2,
                            QuestaoId = 14
                        },
                        new
                        {
                            Id = 29,
                            Descricao = "Sujeito",
                            Ordem = 2,
                            QuestaoId = 15
                        },
                        new
                        {
                            Id = 30,
                            Descricao = "Pronome pessoal do caso reto",
                            Ordem = 1,
                            QuestaoId = 15
                        },
                        new
                        {
                            Id = 31,
                            Descricao = "Cidadãos",
                            Ordem = 1,
                            QuestaoId = 16
                        },
                        new
                        {
                            Id = 32,
                            Descricao = "Cidadães",
                            Ordem = 2,
                            QuestaoId = 16
                        },
                        new
                        {
                            Id = 33,
                            Descricao = "Amo",
                            Ordem = 1,
                            QuestaoId = 17
                        },
                        new
                        {
                            Id = 34,
                            Descricao = "Amarei",
                            Ordem = 2,
                            QuestaoId = 17
                        },
                        new
                        {
                            Id = 35,
                            Descricao = "'Houve problemas'",
                            Ordem = 1,
                            QuestaoId = 18
                        },
                        new
                        {
                            Id = 36,
                            Descricao = "'Houveram problemas'",
                            Ordem = 2,
                            QuestaoId = 18
                        },
                        new
                        {
                            Id = 37,
                            Descricao = "Triste",
                            Ordem = 1,
                            QuestaoId = 19
                        },
                        new
                        {
                            Id = 38,
                            Descricao = "Feliz",
                            Ordem = 2,
                            QuestaoId = 19
                        },
                        new
                        {
                            Id = 39,
                            Descricao = "Feliz",
                            Ordem = 1,
                            QuestaoId = 20
                        },
                        new
                        {
                            Id = 40,
                            Descricao = "Felicitar",
                            Ordem = 2,
                            QuestaoId = 20
                        },
                        new
                        {
                            Id = 41,
                            Descricao = "Vocativo",
                            Ordem = 1,
                            QuestaoId = 21
                        },
                        new
                        {
                            Id = 42,
                            Descricao = "Enumeração",
                            Ordem = 2,
                            QuestaoId = 21
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoConquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("ConquistaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataObtencao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("ConquistaId");

                    b.ToTable("AlunoConquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoPossuiItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAquisicao")
                        .HasColumnType("datetime2");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("ItemId");

                    b.ToTable("AlunoPossuiItens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataUltimaAtualizacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioConficaoId")
                        .HasColumnType("int");

                    b.Property<int>("ValorAtual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DesafioConficaoId");

                    b.ToTable("AlunoProgressoCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoDesafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataConclusao")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("DesafioId");

                    b.ToTable("AlunoProgressoDesafios");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MoedasRecompensa")
                        .HasColumnType("int");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("TempoLimiteSegundos")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.Property<int>("XpRecompensa")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Atividades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataCriacao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Quiz de Frações",
                            MoedasRecompensa = 100,
                            ProfessorId = 4,
                            TempoLimiteSegundos = 600,
                            Titulo = "Quiz de Frações",
                            Valor = 10,
                            XpRecompensa = 100
                        },
                        new
                        {
                            Id = 2,
                            DataCriacao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Atividade de Português",
                            MoedasRecompensa = 100,
                            ProfessorId = 3,
                            TempoLimiteSegundos = 600,
                            Titulo = "Atividade de Português",
                            Valor = 10,
                            XpRecompensa = 100
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeAluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackProfessor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoedasGanhas")
                        .HasColumnType("int");

                    b.Property<int?>("PontuacaoObtida")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("XpGanho")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AtividadeId");

                    b.ToTable("AtividadeAlunos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlunoId = 5,
                            AtividadeId = 1,
                            DataFim = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2025, 4, 12, 10, 19, 0, 0, DateTimeKind.Unspecified),
                            FeedbackProfessor = "Bom",
                            MoedasGanhas = 100,
                            PontuacaoObtida = 10,
                            Status = 3,
                            XpGanho = 100
                        },
                        new
                        {
                            Id = 2,
                            AlunoId = 5,
                            AtividadeId = 2,
                            FeedbackProfessor = "",
                            Status = 1
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeQuestao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("AtividadeQuestoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AtividadeId = 1,
                            Ordem = 1,
                            QuestaoId = 2
                        },
                        new
                        {
                            Id = 2,
                            AtividadeId = 1,
                            Ordem = 2,
                            QuestaoId = 3
                        },
                        new
                        {
                            Id = 3,
                            AtividadeId = 1,
                            Ordem = 3,
                            QuestaoId = 4
                        },
                        new
                        {
                            Id = 4,
                            AtividadeId = 1,
                            Ordem = 4,
                            QuestaoId = 5
                        },
                        new
                        {
                            Id = 5,
                            AtividadeId = 1,
                            Ordem = 5,
                            QuestaoId = 6
                        },
                        new
                        {
                            Id = 6,
                            AtividadeId = 1,
                            Ordem = 6,
                            QuestaoId = 7
                        },
                        new
                        {
                            Id = 7,
                            AtividadeId = 1,
                            Ordem = 7,
                            QuestaoId = 8
                        },
                        new
                        {
                            Id = 8,
                            AtividadeId = 1,
                            Ordem = 8,
                            QuestaoId = 9
                        },
                        new
                        {
                            Id = 9,
                            AtividadeId = 1,
                            Ordem = 9,
                            QuestaoId = 10
                        },
                        new
                        {
                            Id = 10,
                            AtividadeId = 1,
                            Ordem = 10,
                            QuestaoId = 11
                        },
                        new
                        {
                            Id = 11,
                            AtividadeId = 2,
                            Ordem = 1,
                            QuestaoId = 12
                        },
                        new
                        {
                            Id = 12,
                            AtividadeId = 2,
                            Ordem = 2,
                            QuestaoId = 13
                        },
                        new
                        {
                            Id = 13,
                            AtividadeId = 2,
                            Ordem = 3,
                            QuestaoId = 14
                        },
                        new
                        {
                            Id = 14,
                            AtividadeId = 2,
                            Ordem = 4,
                            QuestaoId = 15
                        },
                        new
                        {
                            Id = 15,
                            AtividadeId = 2,
                            Ordem = 5,
                            QuestaoId = 16
                        },
                        new
                        {
                            Id = 16,
                            AtividadeId = 2,
                            Ordem = 6,
                            QuestaoId = 17
                        },
                        new
                        {
                            Id = 17,
                            AtividadeId = 2,
                            Ordem = 7,
                            QuestaoId = 18
                        },
                        new
                        {
                            Id = 18,
                            AtividadeId = 2,
                            Ordem = 8,
                            QuestaoId = 19
                        },
                        new
                        {
                            Id = 19,
                            AtividadeId = 2,
                            Ordem = 9,
                            QuestaoId = 2
                        },
                        new
                        {
                            Id = 20,
                            AtividadeId = 2,
                            Ordem = 10,
                            QuestaoId = 2
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeResposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Acertou")
                        .HasColumnType("bit");

                    b.Property<int>("AlternativaEscolhaId")
                        .HasColumnType("int");

                    b.Property<int>("AtividadeAlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataResposta")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlternativaEscolhaId");

                    b.HasIndex("AtividadeAlunoId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("AtividadeRespostas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Acertou = true,
                            AlternativaEscolhaId = 3,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 2
                        },
                        new
                        {
                            Id = 2,
                            Acertou = true,
                            AlternativaEscolhaId = 5,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 3
                        },
                        new
                        {
                            Id = 3,
                            Acertou = true,
                            AlternativaEscolhaId = 7,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 4
                        },
                        new
                        {
                            Id = 4,
                            Acertou = true,
                            AlternativaEscolhaId = 9,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 5
                        },
                        new
                        {
                            Id = 5,
                            Acertou = true,
                            AlternativaEscolhaId = 11,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 6
                        },
                        new
                        {
                            Id = 6,
                            Acertou = true,
                            AlternativaEscolhaId = 13,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 7
                        },
                        new
                        {
                            Id = 7,
                            Acertou = true,
                            AlternativaEscolhaId = 15,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 8
                        },
                        new
                        {
                            Id = 8,
                            Acertou = true,
                            AlternativaEscolhaId = 17,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 9
                        },
                        new
                        {
                            Id = 9,
                            Acertou = true,
                            AlternativaEscolhaId = 19,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 10
                        },
                        new
                        {
                            Id = 10,
                            Acertou = true,
                            AlternativaEscolhaId = 21,
                            AtividadeAlunoId = 1,
                            DataResposta = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            QuestaoId = 11
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeTurma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AtividadeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtribuicao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AtividadeId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("AtividadeTurmas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AtividadeId = 1,
                            DataAtribuicao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2025, 4, 18, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DisciplinaId = 1,
                            TurmaId = 1
                        },
                        new
                        {
                            Id = 2,
                            AtividadeId = 1,
                            DataAtribuicao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2025, 4, 17, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DisciplinaId = 1,
                            TurmaId = 2
                        },
                        new
                        {
                            Id = 3,
                            AtividadeId = 2,
                            DataAtribuicao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2025, 4, 18, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DisciplinaId = 2,
                            TurmaId = 1
                        },
                        new
                        {
                            Id = 4,
                            AtividadeId = 2,
                            DataAtribuicao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataEntrega = new DateTime(2025, 4, 17, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DisciplinaId = 2,
                            TurmaId = 2
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlunoAId")
                        .HasColumnType("int");

                    b.Property<int?>("AlunoBId")
                        .HasColumnType("int");

                    b.Property<int?>("AlunoPerdedorId")
                        .HasColumnType("int");

                    b.Property<int?>("AlunoVencedorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoedasConcedidasPerdedor")
                        .HasColumnType("int");

                    b.Property<int>("MoedasConcedidasVencedor")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TempoLimiteSegundos")
                        .HasColumnType("int");

                    b.Property<int>("XpConcedidoPerdedor")
                        .HasColumnType("int");

                    b.Property<int>("XpConcedidoVencedor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlunoAId");

                    b.HasIndex("AlunoBId");

                    b.HasIndex("AlunoPerdedorId");

                    b.HasIndex("AlunoVencedorId");

                    b.ToTable("Batalhas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlunoAId = 5,
                            AlunoBId = 6,
                            DataCriacao = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataInicio = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            MoedasConcedidasPerdedor = 50,
                            MoedasConcedidasVencedor = 100,
                            Status = 4,
                            TempoLimiteSegundos = 6000000,
                            XpConcedidoPerdedor = 50,
                            XpConcedidoVencedor = 100
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaQuestao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BatalhaId")
                        .HasColumnType("int");

                    b.Property<int>("Ordem")
                        .HasColumnType("int");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatalhaId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("BatalhaQuestoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BatalhaId = 1,
                            Ordem = 1,
                            QuestaoId = 2
                        },
                        new
                        {
                            Id = 2,
                            BatalhaId = 1,
                            Ordem = 2,
                            QuestaoId = 3
                        },
                        new
                        {
                            Id = 3,
                            BatalhaId = 1,
                            Ordem = 3,
                            QuestaoId = 4
                        },
                        new
                        {
                            Id = 4,
                            BatalhaId = 1,
                            Ordem = 4,
                            QuestaoId = 15
                        },
                        new
                        {
                            Id = 5,
                            BatalhaId = 1,
                            Ordem = 5,
                            QuestaoId = 16
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaResposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Acertou")
                        .HasColumnType("bit");

                    b.Property<int>("AlternativaEscolhaId")
                        .HasColumnType("int");

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<int>("BatalhaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataResposta")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlternativaEscolhaId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("BatalhaId");

                    b.HasIndex("QuestaoId");

                    b.ToTable("BatalhaRespostas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Conquista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CriterioTipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CriterioValor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconeUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Conquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Escopo")
                        .HasColumnType("int");

                    b.Property<int>("MoedasRecompensa")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("XpRecompensa")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataFimVigencia")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dataInicioVigencia")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Desafios");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataFimContagem")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicioContagem")
                        .HasColumnType("datetime2");

                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<string>("DescricaoCondicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipoCondicao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoCondicaoId")
                        .HasColumnType("int");

                    b.Property<int>("ValorObjetivo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesafioId");

                    b.HasIndex("TipoCondicaoId");

                    b.ToTable("DesafioCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioEscola", b =>
                {
                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.HasKey("DesafioId", "EscolaId");

                    b.HasIndex("EscolaId");

                    b.ToTable("DesafioEscolas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioTurma", b =>
                {
                    b.Property<int>("DesafioId")
                        .HasColumnType("int");

                    b.Property<int>("TurmaId")
                        .HasColumnType("int");

                    b.HasKey("DesafioId", "TurmaId");

                    b.HasIndex("TurmaId");

                    b.ToTable("DesafioTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Disciplinas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Matemática",
                            Sigla = "MAT"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Português",
                            Sigla = "PORT"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "História",
                            Sigla = "HIST"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Geografia",
                            Sigla = "GEO"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "Ciências",
                            Sigla = "CIEN"
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "Artes",
                            Sigla = "ART"
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "Educação Física",
                            Sigla = "EDF"
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Inep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoUnidadeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TipoUnidadeId");

                    b.ToTable("Escolas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            Inep = "12016365",
                            Nome = "Escola Exemplo",
                            Sigla = "EE",
                            Telefone = "3251-2266",
                            TipoUnidadeId = 1
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Mensagem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataEnvio")
                        .HasColumnType("datetime2");

                    b.Property<int>("DestinatarioId")
                        .HasColumnType("int");

                    b.Property<bool>("Lida")
                        .HasColumnType("bit");

                    b.Property<int>("RemetenteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("RemetenteId");

                    b.ToTable("Mensagens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perfis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Responsável pela gestão geral da plataforma, com acesso total para configurar escolas, usuários e permissões.",
                            Nome = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Supervisiona as atividades de uma escola específica, podendo gerenciar professores, alunos e turmas.",
                            Nome = "Gestor"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Responsável pelo acompanhamento pedagógico dos alunos, criação de atividades e lançamento de avaliações.",
                            Nome = "Professor"
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlternativaCorretaId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("int");

                    b.Property<string>("Enunciado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NivelEscolar")
                        .HasColumnType("int");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsuarioCriacaoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlternativaCorretaId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("UsuarioCriacaoId");

                    b.ToTable("Questoes");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DisciplinaId = 1,
                            Enunciado = "Quanto é 5 + 3?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 3,
                            DisciplinaId = 1,
                            Enunciado = "Qual é a raiz quadrada de 16?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 4,
                            DisciplinaId = 1,
                            Enunciado = "Quanto é 9 - 4?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 5,
                            DisciplinaId = 1,
                            Enunciado = "Qual é o dobro de 7?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 6,
                            DisciplinaId = 1,
                            Enunciado = "Quanto é 12 ÷ 3?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 7,
                            DisciplinaId = 1,
                            Enunciado = "Quanto é 3²?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 8,
                            DisciplinaId = 1,
                            Enunciado = "Qual é o valor de 10% de 100?",
                            NivelEscolar = 0,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 9,
                            DisciplinaId = 1,
                            Enunciado = "Quanto é 8 × 6?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 10,
                            DisciplinaId = 1,
                            Enunciado = "Quanto é 14 + 5?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 11,
                            DisciplinaId = 1,
                            Enunciado = "Qual é a metade de 30?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 4
                        },
                        new
                        {
                            Id = 12,
                            DisciplinaId = 2,
                            Enunciado = "Qual é o sujeito da frase: 'O menino correu para casa'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 13,
                            DisciplinaId = 2,
                            Enunciado = "Qual a classe gramatical da palavra 'feliz'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 14,
                            DisciplinaId = 2,
                            Enunciado = "Identifique a figura de linguagem: 'O tempo voa.'",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 15,
                            DisciplinaId = 2,
                            Enunciado = "Qual a função do pronome na frase: 'Ela saiu cedo'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 16,
                            DisciplinaId = 2,
                            Enunciado = "Qual é o plural de 'cidadão'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 17,
                            DisciplinaId = 2,
                            Enunciado = "Qual a conjugação do verbo 'amar' na 1ª pessoa do singular no presente?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 18,
                            DisciplinaId = 2,
                            Enunciado = "Qual é a forma correta: 'houveram problemas' ou 'houve problemas'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 19,
                            DisciplinaId = 2,
                            Enunciado = "Qual o antônimo de 'alegre'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 20,
                            DisciplinaId = 2,
                            Enunciado = "A palavra 'felicidade' é derivada de que outra palavra?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        },
                        new
                        {
                            Id = 21,
                            DisciplinaId = 2,
                            Enunciado = "Qual a função da vírgula em: 'Maria, vá já dormir.'?",
                            NivelEscolar = 6,
                            Resposta = "",
                            UsuarioCriacaoId = 3
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoCondicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.TipoUnidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TiposUnidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Escola pública, administrada pela prefeitura de um município, que oferece o ensino fundamental (anos iniciais e finais). ",
                            Nome = "Escola Municipal de Ensino Fundamental",
                            Sigla = "EMEF"
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ano")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.Property<int>("NivelEscolar")
                        .HasColumnType("int");

                    b.Property<int>("Turno")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EscolaId");

                    b.ToTable("Turmas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ano = 2025,
                            Ativo = true,
                            Descricao = "6º Ano A",
                            EscolaId = 1,
                            NivelEscolar = 6,
                            Turno = 1
                        },
                        new
                        {
                            Id = 2,
                            Ano = 2025,
                            Ativo = true,
                            Descricao = "6º Ano B",
                            EscolaId = 1,
                            NivelEscolar = 6,
                            Turno = 1
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<DateTime>("DataUltimoLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenhaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(1997, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "joao@eduquest.com",
                            Nome = "João Admin",
                            SenhaHash = "$2a$11$l.1.XtCPblw2zZZS.UIu2eEOZiaQoypQka7N4rHAq0Qs6l/0dyvga",
                            UsuarioIdentifier = new Guid("3f3a2f14-56e1-4e1e-8d91-9f63d5f3d402")
                        },
                        new
                        {
                            Id = 2,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(1993, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "maria@eduquest.com",
                            Nome = "Maria Gestora",
                            SenhaHash = "$2a$11$/nTO8u7SXBROhis7RGn56OR0mWhxh7Tx.lf2P/F63R/TbHo/oWlZ.",
                            UsuarioIdentifier = new Guid("09d8a9cc-c23d-4b1f-8e14-ff12fd17c248")
                        },
                        new
                        {
                            Id = 3,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(1999, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@eduquest.com",
                            Nome = "Alice Professora",
                            SenhaHash = "$2a$11$mNIy4y97smFq6Vzjj0o6TOxkJ/472tnI4Qv8FQ/3smJjH/Rp4CEZS",
                            UsuarioIdentifier = new Guid("f6f7b3b4-6e3e-4bc9-95f7-0d15f0e034c9")
                        },
                        new
                        {
                            Id = 4,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(2002, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "diego@eduquest.com",
                            Nome = "Diego Professor",
                            SenhaHash = "$2a$11$7aKDv6ML6d7whmHhJYUes.uBNAAcLM.dsIUOhCg1GxX5hXk/SCj62",
                            UsuarioIdentifier = new Guid("61a3b16d-1208-4ce4-b3c6-ccbe0ab0acdf")
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.UsuarioEscolaPerfil", b =>
                {
                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("EscolaId")
                        .HasColumnType("int");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.HasKey("UsuarioId", "EscolaId", "PerfilId");

                    b.HasIndex("EscolaId");

                    b.HasIndex("PerfilId");

                    b.ToTable("UsuarioEscolaPerfis");

                    b.HasData(
                        new
                        {
                            UsuarioId = 1,
                            EscolaId = 1,
                            PerfilId = 1,
                            Ativo = true
                        },
                        new
                        {
                            UsuarioId = 2,
                            EscolaId = 1,
                            PerfilId = 2,
                            Ativo = true
                        },
                        new
                        {
                            UsuarioId = 3,
                            EscolaId = 1,
                            PerfilId = 3,
                            Ativo = true
                        },
                        new
                        {
                            UsuarioId = 4,
                            EscolaId = 1,
                            PerfilId = 3,
                            Ativo = true
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.HasBaseType("EduQuest.Domain.Entities.Usuario");

                    b.Property<DateTime>("DataUltimoAcessoStreak")
                        .HasColumnType("datetime2");

                    b.Property<int>("Nivel")
                        .HasColumnType("int");

                    b.Property<int>("SaldoMoedas")
                        .HasColumnType("int");

                    b.Property<int>("StreakDiasConsecutivos")
                        .HasColumnType("int");

                    b.Property<int?>("TurmaId")
                        .HasColumnType("int");

                    b.Property<int>("XpAtual")
                        .HasColumnType("int");

                    b.HasIndex("TurmaId");

                    b.ToTable("Alunos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(2015, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "lucas@eduquest.com",
                            Nome = "Lucas Aluno",
                            SenhaHash = "$2a$11$zaRQt0VkVQkiPn/dMiKWuO6bpK/nAqyinCMuLk7tXSD3YPVbMAKtO",
                            UsuarioIdentifier = new Guid("a8dd0cd3-e0a1-4a2c-a18d-ec7f69c82872"),
                            DataUltimoAcessoStreak = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Nivel = 1,
                            SaldoMoedas = 1000,
                            StreakDiasConsecutivos = 6,
                            TurmaId = 1,
                            XpAtual = 1220
                        },
                        new
                        {
                            Id = 6,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(2014, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "israel@eduquest.com",
                            Nome = "Israel Aluno",
                            SenhaHash = "$2a$11$zaRQt0VkVQkiPn/dMiKWuO6bpK/nAqyinCMuLk7tXSD3YPVbMAKtO",
                            UsuarioIdentifier = new Guid("772b5cbe-df26-4f16-90b5-4e0fd472e2c6"),
                            DataUltimoAcessoStreak = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Nivel = 1,
                            SaldoMoedas = 1000,
                            StreakDiasConsecutivos = 4,
                            TurmaId = 1,
                            XpAtual = 1180
                        },
                        new
                        {
                            Id = 7,
                            Ativo = true,
                            DataCadastro = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            DataNascimento = new DateOnly(2013, 4, 12),
                            DataUltimoLogin = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Email = "anker@eduquest.com",
                            Nome = "Anker Aluno",
                            SenhaHash = "$2a$11$zaRQt0VkVQkiPn/dMiKWuO6bpK/nAqyinCMuLk7tXSD3YPVbMAKtO",
                            UsuarioIdentifier = new Guid("2eaf4c9b-6bc9-4463-8cf4-27911b34939e"),
                            DataUltimoAcessoStreak = new DateTime(2025, 4, 12, 10, 20, 0, 0, DateTimeKind.Unspecified),
                            Nivel = 2,
                            SaldoMoedas = 2000,
                            StreakDiasConsecutivos = 7,
                            TurmaId = 2,
                            XpAtual = 2430
                        });
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlocacaoProfessor", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany("AlocacaoProfessores")
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Professor")
                        .WithMany("AlocacaoProfessores")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("AlocacaoProfessores")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Alternativa", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoConquista", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoConquistas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Conquista", "Conquista")
                        .WithMany("AlunoConquistas")
                        .HasForeignKey("ConquistaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Conquista");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoPossuiItem", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoPossuiItens")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Item", "Item")
                        .WithMany("AlunoPossuiItens")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoCondicao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoProgressoCondicoes")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.DesafioCondicao", "DesafioCondicao")
                        .WithMany("AlunoProgressoCondicoes")
                        .HasForeignKey("DesafioConficaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("DesafioCondicao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AlunoProgressoDesafio", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AlunoProgressoDesafios")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("AlunoProgressoDesafios")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Desafio");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeAluno", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("AtividadeAlunos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AtividadeAlunos")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Atividade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeQuestao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AtividadeQuestoes")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("AtividadeQuestoes")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atividade");

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeResposta", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Alternativa", "AlternativaEscolha")
                        .WithMany()
                        .HasForeignKey("AlternativaEscolhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.AtividadeAluno", "AtividadeAluno")
                        .WithMany("AtividadeRespostas")
                        .HasForeignKey("AtividadeAlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("AtividadeRespostas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternativaEscolha");

                    b.Navigation("AtividadeAluno");

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeTurma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Atividade", "Atividade")
                        .WithMany("AtividadeTurmas")
                        .HasForeignKey("AtividadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("AtividadeTurmas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Atividade");

                    b.Navigation("Disciplina");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Aluno", "AlunoA")
                        .WithMany("BatalhasAsAlunoA")
                        .HasForeignKey("AlunoAId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduQuest.Domain.Entities.Aluno", "AlunoB")
                        .WithMany("BatalhasAsAlunoB")
                        .HasForeignKey("AlunoBId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduQuest.Domain.Entities.Aluno", "AlunoPerdedor")
                        .WithMany("BatalhasLost")
                        .HasForeignKey("AlunoPerdedorId");

                    b.HasOne("EduQuest.Domain.Entities.Aluno", "AlunoVencedor")
                        .WithMany("BatalhasWon")
                        .HasForeignKey("AlunoVencedorId");

                    b.Navigation("AlunoA");

                    b.Navigation("AlunoB");

                    b.Navigation("AlunoPerdedor");

                    b.Navigation("AlunoVencedor");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaQuestao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Batalha", "Batalha")
                        .WithMany("BatalhaQuestoes")
                        .HasForeignKey("BatalhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("BatalhaQuestoes")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Batalha");

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.BatalhaResposta", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Alternativa", "AlternativaEscolha")
                        .WithMany()
                        .HasForeignKey("AlternativaEscolhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Aluno", "Aluno")
                        .WithMany("RespostasInBatalhas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Batalha", "Batalha")
                        .WithMany("BatalhaRespostas")
                        .HasForeignKey("BatalhaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Questao", "Questao")
                        .WithMany("BatalhaRespostas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AlternativaEscolha");

                    b.Navigation("Aluno");

                    b.Navigation("Batalha");

                    b.Navigation("Questao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("DesafioCondicoes")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.TipoCondicao", "TipoCondicaoNavigation")
                        .WithMany()
                        .HasForeignKey("TipoCondicaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("TipoCondicaoNavigation");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioEscola", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("DesafioEscolas")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany("DesafiosEscolas")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioTurma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Desafio", "Desafio")
                        .WithMany("DesafioTurmas")
                        .HasForeignKey("DesafioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("DesafioTurmas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Desafio");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.TipoUnidade", "TipoUnidade")
                        .WithMany()
                        .HasForeignKey("TipoUnidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoUnidade");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Mensagem", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Destinatario")
                        .WithMany("MensagensRecebidas")
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Remetente")
                        .WithMany("MensagensEnviadas")
                        .HasForeignKey("RemetenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Destinatario");

                    b.Navigation("Remetente");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Alternativa", "AlternativaCorreta")
                        .WithMany()
                        .HasForeignKey("AlternativaCorretaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduQuest.Domain.Entities.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "UsuarioCriacao")
                        .WithMany()
                        .HasForeignKey("UsuarioCriacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlternativaCorreta");

                    b.Navigation("Disciplina");

                    b.Navigation("UsuarioCriacao");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.UsuarioEscolaPerfil", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Escola", "Escola")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Perfil", "Perfil")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Usuario", "Usuario")
                        .WithMany("UsuarioEscolaPerfis")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Escola");

                    b.Navigation("Perfil");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.HasOne("EduQuest.Domain.Entities.Usuario", null)
                        .WithOne()
                        .HasForeignKey("EduQuest.Domain.Entities.Aluno", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduQuest.Domain.Entities.Turma", "Turma")
                        .WithMany("Alunos")
                        .HasForeignKey("TurmaId");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Atividade", b =>
                {
                    b.Navigation("AtividadeAlunos");

                    b.Navigation("AtividadeQuestoes");

                    b.Navigation("AtividadeTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.AtividadeAluno", b =>
                {
                    b.Navigation("AtividadeRespostas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Batalha", b =>
                {
                    b.Navigation("BatalhaQuestoes");

                    b.Navigation("BatalhaRespostas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Conquista", b =>
                {
                    b.Navigation("AlunoConquistas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Desafio", b =>
                {
                    b.Navigation("AlunoProgressoDesafios");

                    b.Navigation("DesafioCondicoes");

                    b.Navigation("DesafioEscolas");

                    b.Navigation("DesafioTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.DesafioCondicao", b =>
                {
                    b.Navigation("AlunoProgressoCondicoes");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Disciplina", b =>
                {
                    b.Navigation("AlocacaoProfessores");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Escola", b =>
                {
                    b.Navigation("DesafiosEscolas");

                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Item", b =>
                {
                    b.Navigation("AlunoPossuiItens");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Perfil", b =>
                {
                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Questao", b =>
                {
                    b.Navigation("Alternativas");

                    b.Navigation("AtividadeQuestoes");

                    b.Navigation("AtividadeRespostas");

                    b.Navigation("BatalhaQuestoes");

                    b.Navigation("BatalhaRespostas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Turma", b =>
                {
                    b.Navigation("AlocacaoProfessores");

                    b.Navigation("Alunos");

                    b.Navigation("AtividadeTurmas");

                    b.Navigation("DesafioTurmas");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("AlocacaoProfessores");

                    b.Navigation("MensagensEnviadas");

                    b.Navigation("MensagensRecebidas");

                    b.Navigation("UsuarioEscolaPerfis");
                });

            modelBuilder.Entity("EduQuest.Domain.Entities.Aluno", b =>
                {
                    b.Navigation("AlunoConquistas");

                    b.Navigation("AlunoPossuiItens");

                    b.Navigation("AlunoProgressoCondicoes");

                    b.Navigation("AlunoProgressoDesafios");

                    b.Navigation("AtividadeAlunos");

                    b.Navigation("BatalhasAsAlunoA");

                    b.Navigation("BatalhasAsAlunoB");

                    b.Navigation("BatalhasLost");

                    b.Navigation("BatalhasWon");

                    b.Navigation("RespostasInBatalhas");
                });
#pragma warning restore 612, 618
        }
    }
}
